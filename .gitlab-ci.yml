variables:
  GITLAB_TOKEN: $CI_PIPELINE_TOKEN

stages:
  - validate
  # - plan
  - apply
  - provision
  - destroy

validate:
  stage: validate
  image:
    name: hashicorp/terraform:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
    # - export AWS_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
    # - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - rm -rf .terraform
    - terraform --version
    - terraform init
  script:
    - terraform fmt -recursive
    - terraform validate
  artifacts:
    paths:
      - aws.cfg
  when: on_success

# plan:
#   stage: plan
#   image:
#     name: hashicorp/terraform:latest
#     entrypoint:
#       - '/usr/bin/env'
#       - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
#   before_script:
#     - export AWS_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
#     - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
#     - rm -rf .terraform
#     - terraform --version
#     - terraform init
#   script:
#     - terraform plan
#   dependencies:
#     - validate

apply:
  stage: apply
  image:
    name: hashicorp/terraform:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
    # - export AWS_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
    # - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - rm -rf .terraform
    - terraform --version
    - terraform init
  script:
    - terraform apply --auto-approve
  dependencies:
    # - plan
    - validate
  when: manual

provision:
  stage: provision
  # image: python:3.9.17-slim-bullseye
  before_script:
    - export AWS_PROFILE=aws_profile
    # - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
    # - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - export AWS_REGION='eu-west-3'
    # - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
    # - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - export ANSIBLE_CONFIG=ansible.cfg
    # - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    # - eval $(ssh-agent -s)
    # - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    # - echo "$SSH_PRIVATE_KEY"
    # - mkdir -p ~/.ssh
    # - chmod 700 ~/.ssh
    # - export ANSIBLE_PRIVATE_KEY_FILE=~/.ssh/Pjpro_key
  script:
    # - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    # - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - pwd
    - pkill ssh-agent # Kill any running ssh-agent process running
    - cat /home/gitlab-runner/.ssh/Pjpro_key
    - cd /home/gitlab-runner/.ssh
    - ssh-agent bash 
    - ssh-add Pjpro_key
    # - sudo apt-get update && apt-get install ansible -y
    # - sudo apt-get install python3-boto3 awscli -y
    # - wget https://raw.githubusercontent.com/vshn/ansible-dynamic-inventory-ec2/master/ec2.py
    # - wget https://raw.githubusercontent.com/vshn/ansible-dynamic-inventory-ec2/master/ec2.ini
    # - sed -i 's/^regions =.*/regions = eu-west-3/' ec2.ini
    # - sed -i 's/^regions_exclude =.*/regions_exclude = us-gov-west-1,cn-north-1/' ec2.ini
    # # Alternatively, you can use a variable for the custom value
    # # - sed -i "s/^regions =.*/regions = $YOUR_CUSTOM_VALUE/" ec2.ini
    # - cat ec2.ini  # For debugging, to verify the changes
    # - export AWS_ACCESS_KEY_ID='AKIAYM4CN735ZH4AQ5DO'
    # - export AWS_SECRET_ACCESS_KEY='Q2BjLHWauvhcTkQoBN62RqQnOuSq4IEhu0IaInQd'
    # - aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID" --profile my_profile
    # - aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY" --profile my_profile
    # - aws configure set region eu-west-3 --profile my_profile
    - cat ~/.aws/credentials
    - cat ~/.aws/config
    - aws sts get-caller-identity
    - ansible --version
    - ansible -m ping all
    - ansible-inventory --list
    - ansible-inventory --graph
  dependencies:
    - apply
  when: manual

destroy:
  stage: destroy
  before_script:
    # - export AWS_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
    # - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - rm -rf .terraform
    - terraform --version
    - terraform init
  script:
    - terraform destroy --auto-approve
  dependencies:
    - apply
  when: manual