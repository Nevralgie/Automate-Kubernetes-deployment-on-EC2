variables:
  DOCKER_CONFIG: "$CI_PROJECT_DIR/.docker"

stages:
  - build
  - validate
  - plan
  - apply
  - provision
  - destroy

# build-docker-image:
#   stage: build
#   image: docker:24.0.5
#   services:
#     - docker:dind
#   variables:
#     DOCKER_DRIVER: overlay2
#     DOCKER_TLS_CERTDIR: "" # Vide pour l'instant pour établie la connection entre les conteneurs
#   before_script:
#     - mkdir -p $DOCKER_CONFIG  # Ensure the Docker config directory exists
#     - echo $REGISTRY_TOKEN | docker login -u "$CI_REGISTRY_USER" $CI_REGISTRY --password-stdin # Connection au registry gitlab
#   script:
#     - echo "Yé boiiiiii"
#     - docker build -t $CI_REGISTRY/ara1504621/terraform-test/app_temoin:v0.1 ./app
#     - docker push $CI_REGISTRY/ara1504621/terraform-test/app_temoin:v0.1
#   artifacts:
#     paths:
#       - .docker/config.json
#   tags:
#     - build_job_docker
#   # when: manual

# validate:
#   stage: validate
#   image:
#     name: hashicorp/terraform:latest
#     entrypoint:
#       - '/usr/bin/env'
#       - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
#   before_script:
#     # - export AWS_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
#     # - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
#     - rm -rf .terraform
#     - terraform --version
#     - terraform init
#   script:
#     - terraform fmt -recursive
#     - terraform validate
#   artifacts:
#     paths:
#       - aws.cfg
#   when: manual
#         # on_success

# plan:
#   stage: plan
#   image:
#     name: hashicorp/terraform:latest
#     entrypoint:
#       - '/usr/bin/env'
#       - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
#   before_script:
#     - export AWS_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
#     - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
#     - rm -rf .terraform
#     - terraform --version
#     - terraform init
#   script:
#     - terraform plan
#   dependencies:
#     - validate

apply:
  stage: apply
  image:
    name: hashicorp/terraform:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
    # - export AWS_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
    # - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - rm -rf .terraform
    - terraform --version
    - terraform init
  script:
    - terraform apply --auto-approve
    # - CLUSTER_NAME=$(terraform output -raw cluster_name)
    # - NODE_GROUP_NAME=$(terraform output -raw node_group_name)
    # - echo "CLUSTER_NAME=$CLUSTER_NAME" > vars.env
    # - echo "NODE_GROUP_NAME=$NODE_GROUP_NAME" >> vars.env
  # dependencies:
  #   # - plan
  #   - validate
  # artifacts:
  #   paths:
  #     - vars.env
  when: manual

deploy_app:
  stage: provision
  # image: python:3.9.17-slim-bullseye
  before_script:
    - export AWS_PROFILE=aws_profile
    - export AWS_REGION='eu-west-3'
    - export ANSIBLE_CONFIG=ansible.cfg
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "/home/gitlab-runner/.ssh/Pjpro_key"
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - export ANSIBLE_PRIVATE_KEY_FILE=~/.ssh/Pjpro_key
  script:
    # - aws eks describe-nodegroup --cluster-name $CLUSTER_NAME --nodegroup-name $NODE_GROUP_NAME --query "nodegroup.resources[0].config.bootstrap.nodeBootstrapConfig.configData" --output text > node-config.yaml
    - cat ~/.aws/credentials
    # - cat ~/.aws/config
    - aws sts get-caller-identity
    - ansible --version
    - ansible -m ping all
    - ansible-inventory --list
    - ansible-inventory --graph
    - ansible-playbook -i inventory.aws_ec2.yaml playbook.yml # -e "@vars.env" -e "node_config_file=config.yaml"
  when: manual
  # needs:
  #   # - provision
  #   # - job: build-docker-image
  #   #   artifacts: true
  #   - job: apply
  #     artifacts: true


destroy:
  stage: destroy
  before_script:
    - rm -rf .terraform
    - terraform --version
    - terraform init
  script:
    - terraform destroy --auto-approve
  # needs:
  #   - apply
  when: manual