variables:
  DOCKER_CONFIG: "$CI_PROJECT_DIR/.docker"
  DOCKER_IMAGE: "graph_stock_pyapp_devenv1.0"

stages:
  - build
  - validate
  - plan
  - apply
  - provision
  - destroy

# build-docker-image:
#   stage: build
#   image: docker:24.0.5
#   services:
#     - docker:dind
#   variables:
#     DOCKER_DRIVER: overlay2
#     DOCKER_TLS_CERTDIR: "" # Vide pour l'instant pour Ã©tablir la connection entre les conteneurs
#   before_script:
#     - echo $REGISTRY_TOKEN | docker login -u "$CI_REGISTRY_USER" $CI_REGISTRY --password-stdin # Connection au registry gitlab
#   script:
#     - docker build -t $CI_REGISTRY/ara1504621/terraform-test/app_temoin:v1.3_db ./app
#     - docker push $CI_REGISTRY/ara1504621/terraform-test/app_temoin:v1.3_db
#   artifacts:
#     paths:
#       - .docker/config.json
#   tags:
#     - build_job_docker

build-docker-image:
  stage: build
  image: 
    name: docker:24.0.5
  services:
    - docker:dind
  variables: 
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - echo $REGISTRY_TOKEN | docker login -u "$CI_REGISTRY_USER" $CI_REGISTRY --password-stdin
    - docker network create test_env
  script:
    - docker build --target build -t $CI_REGISTRY/$DOCKER_IMAGE:test ./app
    - docker run -d --name test_app_cont --hostname stock_analysis --network test_env -p 5000:5000 $CI_REGISTRY/$DOCKER_IMAGE:test
    - sleep 5
    - docker ps
    - docker cp test_app_cont:/app/report.xml $CI_PROJECT_DIR/report.xml
    - docker rm -f test_app_cont
    - docker build --target production -t $CI_REGISTRY/ara1504621/terraform-test/$DOCKER_IMAGE ./app
    - docker run -d --name test_app_cont --hostname stock_analysis --network test_env -p 5000:5000 $CI_REGISTRY/ara1504621/terraform-test/$DOCKER_IMAGE
    - until docker run --network test_env --rm curlimages/curl curl http://stock_analysis:5000; do echo "Waiting for app to start..."; sleep 5; done
    - docker logout
    - docker run --rm --name owaspzap --network test_env -v $(pwd):/zap/reports/:rw -v $(pwd):/zap/wrk/:rw -t zaproxy/zap-stable bash -c "zap.sh -cmd -addonupdate; zap.sh -cmd -quickurl http://stock_analysis:5000 -autorun /zap/wrk/stock_analysis_zap.yml"
    - ls -la
    - echo "$CI_JOB_TOKEN" | docker login -u "$CI_REGISTRY_USER" $CI_REGISTRY --password-stdin
    - docker push $CI_REGISTRY/ara1504621/terraform-test/$DOCKER_IMAGE
  tags:
    - build_job_docker
  artifacts:
    name: "build_and_reports"
    paths:
      - ./app
      - combinedHtmlReport.html
      - report.xml

validate:
  stage: validate
  before_script:
    - rm -rf .terraform
    - terraform --version
    - terraform init
  script:
    - terraform fmt -recursive
    - terraform validate
  tags:
    - build_job_shell
plan:
  stage: plan
  image:
  before_script:
    # - export AWS_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
    # - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - rm -rf .terraform
    - terraform --version
    - terraform init
  script:
    - terraform plan
  needs:
    - validate
  tags:
    - build_job_shell

apply:
  stage: apply
  # image:
  #   name: hashicorp/terraform:latest
  #   entrypoint:
  #     - '/usr/bin/env'
  #     - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
    # - export AWS_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
    # - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - rm -rf .terraform
    - terraform --version
    - terraform init
  script:
    - terraform apply --auto-approve
    # - CLUSTER_NAME=$(terraform output -raw cluster_name)
    # - NODE_GROUP_NAME=$(terraform output -raw node_group_name)
    # - echo "CLUSTER_NAME=$CLUSTER_NAME" > vars.env
    # - echo "NODE_GROUP_NAME=$NODE_GROUP_NAME" >> vars.env
  needs:
    - plan
    - validate
  # artifacts:
  #   paths:
  #     - vars.env
  tags:
    - build_job_shell

deploy_app:
  stage: provision
  # image: python:3.9.17-slim-bullseye
  before_script:
    - export AWS_PROFILE=aws_profile
    - export AWS_REGION='eu-west-3'
    - export ANSIBLE_CONFIG=ansible.cfg
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "/home/gitlab-runner/.ssh/Pjpro_key"
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - export ANSIBLE_PRIVATE_KEY_FILE=~/.ssh/Pjpro_key
  script:
    # - aws eks describe-nodegroup --cluster-name $CLUSTER_NAME --nodegroup-name $NODE_GROUP_NAME --query "nodegroup.resources[0].config.bootstrap.nodeBootstrapConfig.configData" --output text > node-config.yaml
    - cat ~/.aws/credentials
    # - cat ~/.aws/config
    - aws sts get-caller-identity
    - ansible --version
    - ansible -m ping all
    - ansible-inventory --list
    - ansible-inventory --graph
    - ansible-playbook -i inventory.aws_ec2.yaml playbook.yml -e "volume_id=$EBS_PERSISTENT_VOLUME_ID" # -e key_path=.docker/config.json -e "@vars.env" -e "node_config_file=config.yaml"
  needs:
    - job: build-docker-image
      artifacts: true
    - job: apply
      artifacts: true


destroy:
  stage: destroy
  before_script:
    - rm -rf .terraform
    - terraform --version
    - terraform init
  script:
    - terraform destroy --auto-approve
  # needs:
  #   - apply
  when: manual