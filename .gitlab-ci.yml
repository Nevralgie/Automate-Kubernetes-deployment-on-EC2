# # You can override the included template(s) by including variable overrides
# # SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# # Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/pipeline/#customization
# # Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# # Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# # Note that environment variables can be set in several places
# # See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
# # stages:
# # - test
# # sast:
# #   stage: test
# # include:
# # - template: Security/SAST.gitlab-ci.yml

variables:
  GITLAB_TOKEN: $CI_PIPELINE_TOKEN

stages:
  - validate
  - plan
  - apply
  - destroy

image:
  name: hashicorp/terraform:latest
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

before_script:
  - export AWS_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
  - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
  - rm -rf .terraform
  - terraform --version
  - terraform init

validate:
  stage: validate
  script:
    - terraform fmt -recursive
    - terraform validate

plan:
  stage: plan
  script:
    - terraform plan
  dependencies:
    - validate

apply:
  stage: apply
  script:
    - terraform apply --auto-approve
  dependencies:
    - plan
  when: manual

destroy:
  stage: destroy
  script:
    - terraform destroy --auto-approve
  dependencies:
    - apply
  when: manual


# include:
#   - remote: https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Terraform/Base.gitlab-ci.yml
#   - remote: https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Jobs/SAST-IaC.gitlab-ci.yml

# stages:
#   - validate
#   - test
#   - build
#   - deploy
#   - cleanup

# fmt:
#   extends: .terraform:fmt
#   needs: []

# validate:
#   extends: .terraform:validate
#   needs: []

# build:
#   extends: .terraform:build
#   environment:
#     name: $TF_STATE_NAME
#     action: prepare

# deploy:
#   extends: .terraform:deploy
#   dependencies:
#     - build
#   environment:
#     name: $TF_STATE_NAME
#     action: start