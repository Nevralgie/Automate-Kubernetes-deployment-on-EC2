---
- name: Configure Kubernetes prerequisites
  hosts: tag_role_Master  # Target all hosts defined in your Ansible inventory
  become: true  # Run tasks with sudo privileges
  vars: 
    - ansible_hostname: master

  tasks:

    - name: Add hostname and IP address to /etc/hosts file
      lineinfile:
        dest: /etc/hosts
        line: "{{ ansible_default_ipv4.address }} {{ ansible_hostname }}"
        # line: "{{ ansible_default_ipv4.address }} {{ ansible_hostname }}"
        state: present

    - name: Configure modules for Containerd by adding them to /etc/modules-load.d/containerd.conf
      copy:
        content: |
          overlay
          br_netfilter
        dest: /etc/modules-load.d/containerd.conf

    - name: Load kernel modules
      modprobe:
        name: "{{ item }}"
      with_items:
        - overlay
        - br_netfilter

    # Configure sysctl settings for Kubernetes
    - name: Configure sysctl settings
      copy:
        dest: "/etc/sysctl.d/kubernetes.conf"
        content: |
          net.ipv4.ip_forward = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1

    - name: Remove swap entry from /etc/fstab
      lineinfile:
        dest: /etc/fstab
        state: absent
        regexp: '^.*\sswap\s.*$'

    # Apply sysctl settings
    - name: Apply sysctl settings
      shell: sysctl --system  # Run sysctl to apply changes

    - name: Ensure no conflicting package is installed
      shell: for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done
    
    # Update apt cache
    - name: Update apt cache
      apt:
        update_cache: yes

    # Install prerequisite packages for Kubernetes
    - name: Install prerequisite packages
      apt:
        name: "{{ item }}"
        state: present 
      loop:
        - apt-transport-https
        - gnupg2
        - ca-certificates
        - curl
        - gpg
    
    # Create directory for apt keyring
    - name: Create apt keyring directory
      file:
        path: "/etc/apt/keyrings"  
        state: directory  # Ensure directory exists
        mode: '0755'  # Set directory permissions

    - name: Add Docker repository to Apt sources
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
    
    - name: Add Docker repository to Apt sources
      shell: |
        chmod a+r /etc/apt/keyrings/docker.asc
    
    # Add docker apt repository
    - name: Add Docker repository to Apt sources
      shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo $VERSION_CODENAME) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install containerd packages
      apt:
        name: containerd.io  
        state: present
    
    - name: Create directory for containerd configuration
      file:
        path: /etc/containerd
        state: directory

    - name: add Containerd configuration
      shell: /usr/bin/containerd config default > /etc/containerd/config.toml

    - name: Enable systemd cgroup driver for containerd in the configuration file previously generated
      replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'

    - name: Restart and enable containerd service to avoid manual restart when rebooting
      systemd:
        name: containerd
        state: restarted
        enabled: yes
        daemon_reload: yes

    
    - name: Add Kubernetes apt repository signing key
      apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
        state: present
        keyring: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    
        # Add Kubernetes apt repository
    - name: Add Kubernetes apt repository
      copy:
        dest: /etc/apt/sources.list.d/kubernetes.list
        content: |
          deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /
   
    # Update apt cache to enrich the list with added k8s packages
    - name: Update apt cache
      apt:
        update_cache: yes

    # Install Kubernetes components
    - name: Install Kubernetes components
      apt:
        name: "{{ item }}"  # Package name
        state: present  # Ensure package is present
        allow_downgrade: yes
      loop:
        - kubelet=1.29.5-1.1
        - kubeadm=1.29.5-1.1
        - kubectl=1.29.5-1.1

    - name: Hold package at current version
      apt:
        name: "{{ item }}"
      loop:
        - kubelet
        - kubeadm
        - kubectl
        - awscli